# -*- coding: utf-8 -*-
"""LINKED LIST VS ARRAYS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19BpgYjCC__DAV9tJuNnHtvO3KY2aa8HF
"""

class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def size(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count

    def append(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    def prepend(self, value):
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node

    def insert(self, index, value):
        if index == 0:
            self.prepend(value)
            return
        new_node = Node(value)
        current = self.head
        for i in range(index - 1):
            if current is None:
                raise IndexError("Index out of bounds")
            current = current.next
        new_node.next = current.next
        current.next = new_node

    def delete(self, index):
        if self.head is None:
            raise IndexError("Index out of bounds")
        if index == 0:
            self.head = self.head.next
            return
        current = self.head
        for i in range(index - 1):
            if current is None or current.next is None:
                raise IndexError("Index out of bounds")
            current = current.next
        current.next = current.next.next

    def rotate(self, k):
        if self.head is None or k == 0:
            return
        length = self.size()
        k = k % length
        if k == 0:
            return
        fast = self.head
        slow = self.head
        for i in range(k):
            fast = fast.next
        while fast.next:
            fast = fast.next
            slow = slow.next
        new_head = slow.next
        slow.next = None
        fast.next = self.head
        self.head = new_head

    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    def merge(self, other):
        if self.head is None:
            self.head = other.head
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = other.head

    def interleave(self, other):
        p1 = self.head
        p2 = other.head
        while p1 and p2:
            p1_next = p1.next
            p2_next = p2.next
            p1.next = p2
            if p1_next is None:
                break
            p2.next = p1_next
            p1 = p1_next
            p2 = p2_next
        if p1 is None:
            p1.next = p2

    def middle(self):
        if self.head is None:
            return None
        slow = self.head
        fast = self.head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow.value

    def index_of(self, value):
        current = self.head
        index = 0
        while current:
            if current.value == value:
                return index
            current = current.next
            index += 1
        return -1

    def split(self, index):
        if self.head is None or index == 0:
            new_list = LinkedList()
            new_list.head = self.head
            self.head = None
            return new_list
        current = self.head
        for i in range(index - 1):
            if current is None:
                raise IndexError("Index out of bounds")
            current = current.next
        new_list = LinkedList()
        new_list.head = current.next
        current.next = None
        return new_list

"""**DYNAMIC** **ARRAY**

"""

class DynamicArray:
    def __init__(self, capacity=2):
        self.capacity = capacity
        self.size = 0
        self.array = [None] * self.capacity

    def _resize(self, new_capacity):
        new_array = [None] * new_capacity
        for i in range(self.size):
            new_array[i] = self.array[i]
        self.capacity = new_capacity
        self.array = new_array

    def insert(self, index, value):
        if index < 0 or index > self.size:
            raise IndexError("Index out of bounds")
        if self.size == self.capacity:
            self._resize(self.capacity * 2)
        for i in range(self.size, index, -1):
            self.array[i] = self.array[i - 1]
        self.array[index] = value
        self.size += 1

    def delete(self, index):
        if index < 0 or index >= self.size:
            raise IndexError("Index out of bounds")
        for i in range(index, self.size - 1):
            self.array[i] = self.array[i + 1]
        self.array[self.size - 1] = None
        self.size -= 1
        if self.size <= self.capacity // 4:
            self._resize(self.capacity // 2)

    def get_size(self):
        return self.size

    def is_empty(self):
        return self.size == 0

    def rotate(self, k):
        k = k % self.size
        self.array = self.array[-k:] + self.array[:-k]

    def reverse(self):
        start = 0
        end = self.size - 1
        while start < end:
            self.array[start], self.array[end] = self.array[end], self.array[start]
            start += 1
            end -= 1

    def append(self, value):
        if self.size == self.capacity:
            self._resize(self.capacity * 2)
        self.array[self.size] = value
        self.size += 1

    def prepend(self, value):
        self.insert(0, value)

    def merge(self, other):
        for i in range(other.get_size()):
            self.append(other.array[i])

    def interleave(self, other):
        new_array = DynamicArray()
        i, j = 0, 0
        while i < self.size or j < other.size:
            if i < self.size:
                new_array.append(self.array[i])
                i += 1
            if j < other.size:
                new_array.append(other.array[j])
                j += 1
        return new_array

    def middle(self):
        if self.size == 0:
            return None
        return self.array[self.size // 2]

    def index_of(self, value):
        for i in range(self.size):
            if self.array[i] == value:
                return i
        return -1

    def split(self, index):
        if index < 0 or index > self.size:
            raise IndexError("Index out of bounds")
        new_array = DynamicArray(self.capacity)
        for i in range(index, self.size):
            new_array.append(self.array[i])
        self.size = index
        return new_array

    def resize_with_factor(self, factor):
        if factor <= 1:
            raise ValueError("Factor must be greater than 1")
        self._resize(int(self.capacity * factor))